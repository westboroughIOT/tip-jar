// Tip jar code version 1.2// Tip jar uses two HC-SR04 ultrasonic distance sensors to detect coins / currecy being dropped// LED display and buzzer when the tip is detected// Thingspeak is updated with Tip event// Westborough IOT//Pugal Shanmugam 01/15/2017#define echoPin 4 // Echo Pin#define trigPin 5 // Trigger Pin#define echoPin1 16 // Echo Pin#define trigPin1 2 // Trigger Pin#include <ESP8266WiFi.h>#include <WiFiClient.h>#include <ESP8266WebServer.h>#include <EEPROM.h>#include "LedControlMS.h"LedControl lc=LedControl(13,15,14,1);String apiKey = "IXGFE0UCK751R3V0";const char* ssid = "IAMTIPJAR";const char* password = "PASSWORD";unsigned long delaytime=500;byte a[20];byte b[20];int ssidlen = 0;int sspasslen = 0;int LEDCount = 0; int maximumRange = 200; // Maximum range neededint minimumRange = 0; // Minimum range neededlong duration, distance; // Duration used to calculate distanceint dis_without_tip; // sets the distance without a tipint distance_w_adjust; // add some type of correction for senstivity factors.long duration1, distance1; // Duration used to calculate distanceint dis_without_tip1; // sets the distance without a tipint distance_w_adjust1; // add some type of correction for senstivity factors.//const char* host = "things.westboroughiot.com";const char* host = "api.thingspeak.com";String url = "/0/";ESP8266WebServer server(80);WiFiClient client;boolean wificonnected = false;int J = 0;int addr = 0;void beeb(unsigned char delayms){  analogWrite(1, 200);      // Almost any value can be used except 0 and 255  delay(delayms);          // wait for a delayms ms  analogWrite(1, 0);       // 0 turns it off  delay(delayms);          // wait for a delayms ms     analogWrite(1, 200);      // Almost any value can be used except 0 and 255  delay(delayms);          // wait for a delayms ms  analogWrite(1, 0);       // 0 turns it off  analogWrite(1, 200);      // Almost any value can be used except 0 and 255  delay(delayms);          // wait for a delayms ms  analogWrite(1, 0);       // 0 turns it off  }  void writeOnMatrixTIP() {  /* here is the data for the characters */  byte I[5]={ B00100001,B00100001,B00111111,B00100001,B00100001  };  byte P[5]={ B11111111,B10001000,B10001000,B10001000,B01110000  };  byte T[5]={ B00100000,B00100000,B00111111,B00100000,B00100000  };   /* now display them one by one with a small delay */  lc.setRow(0,0,T[0]);  lc.setRow(0,1,T[1]);  lc.setRow(0,2,T[2]);  lc.setRow(0,3,T[3]);  lc.setRow(0,4,T[4]);  //delay(delaytime);  lc.setRow(0,0,I[0]);  lc.setRow(0,1,I[1]);  lc.setRow(0,2,I[2]);  lc.setRow(0,3,I[3]);  lc.setRow(0,4,I[4]);  //delay(delaytime);  lc.setRow(0,4,P[0]);  lc.setRow(0,3,P[1]);  lc.setRow(0,2,P[2]);  lc.setRow(0,1,P[3]);  lc.setRow(0,0,P[4]);  //delay(delaytime);  lc.setRow(0,0,0);  lc.setRow(0,1,0);  lc.setRow(0,2,0);  lc.setRow(0,3,0);  lc.setRow(0,4,0);  delay(delaytime);}void single(){    for(int row=0;row<8;row++)   {    for(int col=0;col<8;col++)     {     delay(5);      lc.setLed(0,row,col,true);      delay(5);      for(int i=0;i<col;i++)       {        lc.setLed(0,row,col,false);        delay(5);        lc.setLed(0,row,col,true);        delay(5);      }    }  }      }void writeOnMatrixTHX() {    /* here is the data for the characters */  byte T[5]={ B00100000,B00100000,B00111111,B00100000,B00100000  };  byte H[5]={ B01111111,B00001000,B00001000,B00001000,B01111111  };  byte X[5]={ B00010001,B00001010,B00000100,B00001010,B00010001  };  /* now display them one by one with a small delay */  lc.setRow(0,0,T[0]);  lc.setRow(0,1,T[1]);  lc.setRow(0,2,T[2]);  lc.setRow(0,3,T[3]);  lc.setRow(0,4,T[4]);  delay(delaytime);  lc.setRow(0,0,H[0]);  lc.setRow(0,1,H[1]);  lc.setRow(0,2,H[2]);  lc.setRow(0,3,H[3]);  lc.setRow(0,4,H[4]);  delay(delaytime);  lc.setRow(0,0,X[0]);  lc.setRow(0,1,X[1]);  lc.setRow(0,2,X[2]);  lc.setRow(0,3,X[3]);  lc.setRow(0,4,X[4]);  delay(delaytime);  lc.setRow(0,0,0);  lc.setRow(0,1,0);  lc.setRow(0,2,0);  lc.setRow(0,3,0);  lc.setRow(0,4,0);  delay(delaytime);}void handleRoot(){  Serial.println("Enter handleRoot");  String header;  String content = "<html><body><H2>Welcome to TipJar Configuration</H2><br>";  if (server.hasHeader("User-Agent")){    content += "the user agent used is : " + server.header("User-Agent") + "<br><br>";  }  content += "<a href='/login'>Click here to  configure WiFi for TipJar</a></body></html>";  server.send(200, "text/html", content);}void initialScreen(){  Serial.println("Enter initialscreen");  String header;  String content = "<html><body><H2>Welcome to TipJar Configuration</H2><br><form action='/wifi' method='POST'><br>";  int n=0;  for (int i = 0; i < 3; ++i)  {  n = WiFi.scanNetworks();  delay(5000);  }  Serial.println("scan done");  if (n == 0)    content += "<H1>No WiFi Networks Available</H1>";  else  {    Serial.print(n);    Serial.println(" networks found");    for (int i = 0; i < n; ++i)    {      // Print SSID and RSSI for each network found            content += "<input type=\"radio\" name=\"SSIDVal\" value=\""+WiFi.SSID(i)+"\">"+WiFi.SSID(i)+"</input></p>";            delay(10);    }  }   content += "Password:<input type='password' name='PASSWORD' placeholder='password'><br>";   content += "<input type='submit' name='SUBMIT' value='Submit'></form><br>";   content += "</body></html>";   server.send(200, "text/html", content);}void WifiConnect(){  Serial.println("WIFI Connect");  String content = "";  String strSSID = "";  String strPass = "";   if (server.hasArg("SSIDVal") && server.hasArg("PASSWORD")){          strSSID = server.arg("SSIDVal");      Serial.println("connecting toSSIDVal ******"+strSSID);      strPass = server.arg("PASSWORD");      Serial.println("connecting Pass ******"+strPass);      char chSSID[strSSID.length()];      char chPass[strPass.length()];       strSSID.toCharArray(chSSID,strSSID.length()+1);      strPass.toCharArray(chPass,strPass.length()+1);      String header = "HTTP/1.1 301 OK\r\nSet-Cookie: ESPSESSIONID=1\r\nLocation: /\r\nCache-Control: no-cache\r\n\r\n";      server.sendContent(header);      WiFi.disconnect(true);      Serial.println();      Serial.print("connecting to ");      Serial.println(strSSID);      WiFi.begin(chSSID,chPass);      while (WiFi.status() != WL_CONNECTED) {        delay(500);        Serial.print(".");      }      Serial.println("");      Serial.println("WiFi connected");      Serial.println("IP address: ");      String strIP= "";      Serial.println(WiFi.localIP());      content = "<html><body><H1>You have successfully connected to "+server.arg("SSIDVal")+"</H1><br>";      wificonnected = true;      EEPROM.begin(512);       for (int i = 0; i < 96; ++i) { EEPROM.write(i, 0); }       for (int i = 0; i < strSSID.length(); ++i)          {            EEPROM.write(i, strSSID[i]);            Serial.print("Wrote: ");            Serial.println(strSSID[i]);           }        Serial.println("writing eeprom pass:");         for (int i = 0; i < strPass.length(); ++i)          {            EEPROM.write(32+i, strPass[i]);            Serial.print("Wrote: ");            Serial.println(strPass[i]);           }            EEPROM.commit();                 //  content = "<body><H1>IP Address "+strIP(WiFi.localIP())+"</H1><br></html>"  } else {  content = "<html><body><H1>Unable to make a WiFi connection </H1><br>";  }  server.send(200, "text/html", content);}void handleNotFound(){  String message = "File Not Found\n\n";  message += "URI: ";  message += server.uri();  message += "\nMethod: ";  message += (server.method() == HTTP_GET)?"GET":"POST";  message += "\nArguments: ";  message += server.args();  message += "\n";  for (uint8_t i=0; i<server.args(); i++){    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";  }  server.send(404, "text/plain", message);}void setup(void) {    lc.shutdown(0,false);   //* Set the brightness to a medium values */    lc.setIntensity(0,8);    //* and clear the display */    lc.clearDisplay(0);    beeb(500);    single();    lc.clearDisplay(0);    pinMode(trigPin, OUTPUT);    pinMode(echoPin, INPUT);    pinMode(trigPin1, OUTPUT);    pinMode(echoPin1, INPUT);    pinMode(BUILTIN_LED, OUTPUT); // Use LED indicator (if required)    WiFi.disconnect();    WiFi.mode(WIFI_AP_STA);    Serial.begin(115200);    EEPROM.begin(512);    Serial.println("Starting serial");    String esid;      for (int i = 0; i < 32; ++i)        {          esid += char(EEPROM.read(i));        }      Serial.print("SSID: ");      Serial.println(esid);      Serial.println("Reading EEPROM pass");      String epass = "";      for (int i = 32; i < 96; ++i)        {          epass += char(EEPROM.read(i));        }      Serial.print("PASS: ");      Serial.println(epass);        if ( esid.length() > 1 ) {          // test esid           WiFi.begin(esid.c_str(), epass.c_str());          int V=0;          while (WiFi.status() != WL_CONNECTED && V < 20) {              delay(500);              Serial.print(".");              V++;            }            if (WiFi.status() != WL_CONNECTED)            {              Serial.print("wifi not connected so starting accessing point");              WiFi.softAP(ssid, password);                          } else            {                Serial.print("Wifi Connected");                wificonnected = true;                          }        }       else {        WiFi.softAP(ssid, password);    Serial.print("Access point started");        }    EEPROM.end();    Serial.println("");    Serial.println("");    Serial.print("Connected to ");    Serial.println(ssid);    Serial.print("IP address: ");    IPAddress myIP = WiFi.softAPIP();    Serial.print("AP IP address: ");    Serial.println(myIP);        server.on("/", handleRoot);        server.on("/login", initialScreen);    server.on("/wifi", WifiConnect);    server.onNotFound(handleNotFound);    //here the list of headers to be recorded    const char * headerkeys[] = {"User-Agent","Cookie"} ;    size_t headerkeyssize = sizeof(headerkeys)/sizeof(char*);    //ask server to track these headers    server.collectHeaders(headerkeys, headerkeyssize);    server.begin();    Serial.println("HTTP server started");}void loop() {    if (wificonnected){     Serial.println("hello");     String post_payload = "'{\"Location\":\"Westborough\",\"Business\":\"Central House\",\"ID\":\"JAR0001\"}'";     digitalWrite(trigPin, LOW);      delayMicroseconds(2);      digitalWrite(trigPin, HIGH);     delayMicroseconds(10);      digitalWrite(trigPin, LOW);     duration = pulseIn(echoPin, HIGH);     distance = duration/58.2;     if (!dis_without_tip) {         Serial.println("Setting non tip distance to ");          Serial.println(distance);        dis_without_tip = distance;       }     digitalWrite(trigPin1, LOW);      delayMicroseconds(2);      digitalWrite(trigPin1, HIGH);     delayMicroseconds(10);      digitalWrite(trigPin1, LOW);     duration1 = pulseIn(echoPin1, HIGH);     distance1 = duration1/58.2;     if (!dis_without_tip1) {         Serial.println("Setting non tip distace  second sensor ");          Serial.println(distance1);        dis_without_tip1 = distance1;      }//      Serial.println("First sensor distance");     Serial.println(distance);       Serial.println("second sensor distance");     Serial.println(distance1);     distance_w_adjust = distance  + 1; // give some room for error of 1      distance_w_adjust1 = distance1  + 1; // give some room for error of 1      if ( distance_w_adjust < dis_without_tip || distance_w_adjust1 < dis_without_tip1)     {               writeOnMatrixTHX();               lc.clearDisplay(0);               //beeb(delaytime);               single();               lc.clearDisplay(0);                Serial.println(host);                if (!client.connect(host, 80)) {                  Serial.println("connection failed");                  return;               }                Serial.println("Inside for loop");                String postStr = apiKey;                 postStr +="&field1=1";                 postStr +="&field2=";                 postStr +=String(J);                 postStr +="&field3=0";                  postStr += "\r\n\r\n";                                 client.print("POST /update HTTP/1.1\n");                 client.print("Host: api.thingspeak.com\n");                 client.print("Connection: close\n");                 client.print("X-THINGSPEAKAPIKEY: "+apiKey+"\n");                 client.print("Content-Type: application/x-www-form-urlencoded\n");                 client.print("Content-Length: ");                 client.print(postStr.length());                 client.print("\n\n");                 client.print(postStr);                 delay(5000);                // writeOnMatrixTHX();                //lc.clearDisplay(0);                      while(client.available()) {                Serial.println("client is available");                String line = client.readStringUntil('\r');                Serial.print(line);                 }                client.stop();      }   else       {                                    digitalWrite(BUILTIN_LED, LOW);               Serial.println("no tip");                             }          //Delay 50ms before next reading.     delay(50);}  server.handleClient();}
